package java_sorting_app.util;

import java.util.Comparator;

public class CustomInsertionSort {
    public static <T> void selectionSort(CustomArrayList<T> list, Comparator<? super T> comparator) {

        //принцип работы алгоритма сортировкой вставкой
        //сортируемый массив условно делим на 2 части.
        //слева отсортированная последовательность, а справа то что надо отсортировать
        //берем элемент правой части и вставляем его в нужное нам отсротированное место
        // 3 2 1 -> 2 3 1 ->  1 2 3
        // то есть нужно два цикла. Первый - цикл по элементом неотсротированной последовательности, и
        // второй - внутренний цикл, где мы перемещаем вправо на одну ячейку все элементы, которые больше значения

        {
           // Внешним циклом проходим по всем элементам списка
            for (int i = 0; i < list.size(); i++) {
                // Текущая позиция минимального элемента
                int minPos = i;
                // Текущее значение минимального элемента
                T minValue = list.get(i);
                //Входим в текущем цикле во внутренний цикл,где перемещаем минимальный элемент в ранее отсортированной части цикла
                for (int j = i + 1; j <list.size(); j++) {
                    // Текущий проверяемый элемент
                    T current = list.get(i);
                // Сравниваем элементы через компаратор. Если меньше 0, значит текущий элемент больше минимального,
                // значит надо менять местами
                    if (comparator.compare (current, minValue) < 0) {
                        // Обновление позиции минимума
                        minPos = j;
                        // Обновление значения минимума
                        minValue = current;
                    }
                    }
                //Меняются элементы местами
                if (minPos != i) {
                    // Временное хранение элемента i
                    T temp = list.get(i);
                    // Замена i-го элемента минимальным
                    list.set(i, minValue);
                    // Перенос исходного i-го элемента на место минимума
                    list.set(minPos, temp);
                }
                }
            }
        }
    }

